// C++ code
//Diseñar un contador de 0 a 99 utilizando dos displays de 7 segmentos y tres botones para
//controlar la cuenta. Debes implementar la técnica de multiplexación para mostrar los dígitos
//en los displays. El contador debe comenzar en 0 y debe ser capaz de aumentar o disminuir
//su valor en una unidad con los botones.


//Defino los pins
#define LED_A 12
#define LED_B 13
#define LED_C 7
#define LED_D 8
#define LED_E 9
#define LED_F 11
#define LED_G 10
#define BAJA 3
#define SUBE 4
#define REINICIAR 2
#define UNIDAD A4
#define DECENA A5
#define LED_TECLA 5

//Defino variables constantes
#define APAGADO 0
#define TIEMPO 10

//inicializo variables
int contador=0;
int sube=1;
int baja=1;
int reiniciar=1;
int subePrevia=1;
int bajaPrevia=1;
int reinicioPrevio=1;

//Defino cada pin como entrada o salida
void setup()
{
  pinMode(REINICIAR, INPUT_PULLUP);
  pinMode(SUBE, INPUT_PULLUP);
  pinMode(BAJA, INPUT_PULLUP);
  pinMode(LED_TECLA, INPUT_PULLUP);
  pinMode(LED_C, OUTPUT);
  pinMode(LED_B, OUTPUT);
  pinMode(LED_A, OUTPUT);
  pinMode(LED_G, OUTPUT);
  pinMode(LED_F, OUTPUT);
  pinMode(LED_D, OUTPUT);
  pinMode(LED_E, OUTPUT);
  pinMode(UNIDAD, OUTPUT);
  pinMode(DECENA, OUTPUT);
  //A unidad y decena les asigno el valor 0
  digitalWrite(UNIDAD,LOW); 
  digitalWrite(DECENA,LOW);
  
}

//mostrarNumero recibe por parametro el contador
//y lo digitaliza en el segmento
void mostrarNumero(int numero);

void mostrarNumero(int numero)
{
  
  //se apagan todos los leds
  digitalWrite(LED_A, LOW);
  digitalWrite(LED_B, LOW);
  digitalWrite(LED_C, LOW);
  digitalWrite(LED_D, LOW);
  digitalWrite(LED_E, LOW);
  digitalWrite(LED_F, LOW);
  digitalWrite(LED_G, LOW);
  
  //se encienden los leds formando el numero correspondiente  
  switch(numero){
    
    case 0:
    	digitalWrite(LED_A, HIGH);
  		digitalWrite(LED_B, HIGH);
    	digitalWrite(LED_F, HIGH);
    	digitalWrite(LED_E, HIGH);
    	digitalWrite(LED_D, HIGH);
    	digitalWrite(LED_C, HIGH);
    	break;
  	case 1:
    	digitalWrite(LED_B, HIGH);
  		digitalWrite(LED_C, HIGH);
		break;
    case 2:
    	digitalWrite(LED_A, HIGH);
  		digitalWrite(LED_B, HIGH);
    	digitalWrite(LED_G, HIGH);
    	digitalWrite(LED_E, HIGH);
    	digitalWrite(LED_D, HIGH);
		break;
    case 3:
    	digitalWrite(LED_A, HIGH);
  		digitalWrite(LED_B, HIGH);
    	digitalWrite(LED_G, HIGH);
    	digitalWrite(LED_C, HIGH);
    	digitalWrite(LED_D, HIGH);
    	break;
    case 4:
    	digitalWrite(LED_F, HIGH);
  		digitalWrite(LED_B, HIGH);
    	digitalWrite(LED_G, HIGH);
    	digitalWrite(LED_C, HIGH);
		break;
    case 5:
    	digitalWrite(LED_A, HIGH);
  		digitalWrite(LED_F, HIGH);
    	digitalWrite(LED_G, HIGH);
    	digitalWrite(LED_C, HIGH);
    	digitalWrite(LED_D, HIGH);
    	break;
    case 6:
    	digitalWrite(LED_A, HIGH);
  		digitalWrite(LED_F, HIGH);
    	digitalWrite(LED_G, HIGH);
    	digitalWrite(LED_C, HIGH);
    	digitalWrite(LED_D, HIGH);
    	digitalWrite(LED_E, HIGH);
    	break;
    case 7:
    	digitalWrite(LED_A, HIGH);
  		digitalWrite(LED_B, HIGH);
    	digitalWrite(LED_C, HIGH);
		break;
    case 8:
    	digitalWrite(LED_A, HIGH);
  		digitalWrite(LED_B, HIGH);
    	digitalWrite(LED_F, HIGH);
    	digitalWrite(LED_E, HIGH);
    	digitalWrite(LED_D, HIGH);
    	digitalWrite(LED_C, HIGH);
    	digitalWrite(LED_G, HIGH);
    	break;
    case 9:
    	digitalWrite(LED_G, HIGH);
  		digitalWrite(LED_B, HIGH);
    	digitalWrite(LED_F, HIGH);
    	digitalWrite(LED_A, HIGH);
    	digitalWrite(LED_C, HIGH);
    	break;    
  }

}

//funcion antirebote para verificar los estados del boton, 
//si se apreto y se solto, retorna el pin del boton correspondiente
int antirebote(void);
int antirebote(void){
	sube = digitalRead(SUBE);//devuelve 0 si presiono, 1 si no presiono
  	baja = digitalRead(BAJA);
  	reiniciar = digitalRead(REINICIAR);

  if(sube)
    subePrevia=1;
  
  if(baja)
    bajaPrevia=1;
  
  if(reiniciar)
    reinicioPrevio=1;
   
    if(sube==0 && sube!= 1){
      subePrevia=sube;
      return SUBE;
    }
  
    if(baja==0 && baja != bajaPrevia){
      bajaPrevia=baja;
      return BAJA;
    }
    if(reiniciar==0 && reiniciar != reinicioPrevio){
      reinicioPrevio=reiniciar;
      return REINICIAR;
    }
  return 0;
}

//funcion prenderSegmento recibe por parametro el segmento que va a encender
void prenderSegmento(int segmento);

void prenderSegmento(int segmento){
  if(segmento == UNIDAD){ //UNIDAD = A4
  	digitalWrite(UNIDAD, LOW);
    digitalWrite(DECENA, HIGH);
    delay(TIEMPO);
  }
  else if(segmento==DECENA){//DECENA = A5
  	digitalWrite(UNIDAD, HIGH);
    digitalWrite(DECENA, LOW);
    delay(TIEMPO);
  }
  else{
  	digitalWrite(UNIDAD, HIGH);
    digitalWrite(DECENA, HIGH);
  }
}

//funcion mostrarContador recibe el contador del segun el boton presionado
//en el caso de la decena 
void mostrarContador(int contador);
void mostrarContador(int contador){
	
  	prenderSegmento(APAGADO);
  	mostrarNumero(contador/10);//contador se divide por 10 para obtener la cantidad de decenas
    prenderSegmento(DECENA);
    prenderSegmento(APAGADO);
    mostrarNumero(contador - 10*((int)contador/10));
    //a contador lo divido por 10
    //y el resultado lo multiplico por 10 para obtener la cantida de decenas que debo restar a contador
    //y asi poder obtener la unidad
  	prenderSegmento(UNIDAD);
}


void loop()
{
  //obtengo el boton que se presiono
  int botonPresionado = antirebote();
  if(botonPresionado==SUBE){
    //sumo 1 al contador 
  	contador++;
    if(contador>99){
      //si el contador esta en 99 y suma 1 reinicia a 0
    	contador=0;
    }
  }
  else if(botonPresionado==BAJA){
    //resto 1 al contador
  	contador--;
    if(contador<0){
      //si el contador esta en 0 y resta 1 retorna a 99
    	contador=99;
    }
  }
  else if(botonPresionado==REINICIAR){
    //reinicio el contador a 0
      contador=0;
  }
  //muesta el contador en los segmentos
  mostrarContador(contador);
  
}
